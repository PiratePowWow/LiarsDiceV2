ROUTE LIST


/**PURPOSE - Connect to the server and start a brand new game
     *
     * @headerParam name - this is the player's desired name
     * @headerParam roomCode - this must be "undefined"
     * @return CONNECTED frame
     */
    CONNECT ADDRESS("/liarsDice")

/**PURPOSE - Connect to the server and join an existing game
     *
     * @headerParam name - this is the player's desired name
     * @headerParam roomCode - this must be the desired room code
     * @return CONNECTED frame
     */
    CONNECT ADDRESS("/liarsDice")

/**PURPOSE - Subscribe to this channel to receive Error Messages
 *
 * @param myPlayerId
 */
	SUBSCRIBE ADDRESS("/topic/lobby/error/{myPlayerId}")

/**PURPOSE - Obtain the user's full Player object(currently the only way to view your player's dice)
     *
     * @param myPlayerId - this is the client websocket session id
     * @return PlayerDtoSansGameState - this will be the full Player object excluding the GameState
     */
    SEND ADDRESS("/app/lobby/{myPlayerId}")
    SUBSCRIBE ADDRESS("/topic/lobby/{myPlayerId}")

/**
	 *
	 * @param id - this is the client websocket session id
	 * @return {"playerList": PlayerDtos, "gameState": GameStateDto} - PlayerDtos is a list of PlayerDto, GamestateDto is a single object
	 */
	SEND ADDRESS("/lobby/JoinGame")
	SUBSCRIBE ADDRESS("/topic/playerList")

/**PURPOSE - Signal to the server the player wishes to roll their dice, returns the Player object back to the player, updates playerList and gameState for everyone
     *
     * @param id - this is the client websocket session id
     * @return("/topic/playerList") {"playerList": PlayerDtos, "gameState": GameStateDto} - PlayerDtos is a list of PlayerDto, GamestateDto is a single object
 	 * @return("/topic/lobby/{myPlayerId}") PlayerDtoSansGameState - this will be the full Player object excluding the GameState
     */
    SEND ADDRESS("/app/lobby/rollDice")
    SUBSCRIBE ADDRESS("/topic/playerList")
	SUBSCRIBE ADDRESS("/topic/lobby/{myPlayerId}")

/**PURPOSE - Signal to the server the player wishes to set their stake(raise the stakes), returns the Player object back to the player, updates playerList and gameState for everyone
     *
     * @param id - this is the client websocket session id
     * @param newStake - an ArrayList of two Integers: [quantity, quality]
     * @return {"playerList": PlayerDtos, "gameState": GameStateDto} - PlayerDtos is a list of PlayerDto, GamestateDto is a single object
  	 * @return("/topic/lobby/{myPlayerId}") PlayerDtoSansGameState - this will be the full Player object excluding the GameState
     */
    SEND ADDRESS("/app/lobby/setStake")
    SUBSCRIBE ADDRESS("/topic/playerList")
	SUBSCRIBE ADDRESS("/topic/lobby/{myPlayerId}")

/**PURPOSE - Signal to the server the player wants to reset the game(start a new game, but keep same roomCode and existing players)
     *
     * @param id - this is the client websocket session id
     * @return {"playerList": PlayerDtos, "gameState": GameStateDto} - PlayerDtos is a list of PlayerDto, GamestateDto is a single object
     */
    SEND ADDRESS("/app/lobby/resetGame")
    SUBSCRIBE ADDRESS("/topic/playerList")

/**PURPOSE - Signal to the server the player wants to call the last player's bluff
     *
     * @param id - this is the client websocket session id
     * @return loserDto - this is the PlayerDto of the losing player
     */
    @MessageMapping("/app/lobby/callBluff")
    @SendTo("/topic/loser")

JAVA OBJECT DEFINITIONS

//PURPOSE - I had to remove the GameState from the full Player object because it contained the sessionIds of other players
PlayerDtoSansGameState: {
	"id": - this is the client websocket session id
	"name": - String
	"dice": - this is an ArrayList of five Integers: [die1, die2, die3, die4, die5]
	"stake": - this is an ArrayList of two Integers: [quantity, quality]
	"score": - Integer
	"seatNum": - this is an Integer that determines the order in which players take their turn
}

//PURPOSE - A convenience class I created for converting an ArrayList of Player objects into an ArrayList of PlayerDto objects
PlayerDtos: - this is just an ArrayList of PlayerDto of each player in the game

//PURPOSE - This class was created because I did not want to send sensitive player information to all the players in the game
//You can see I took out id & dice because we do not want other players to have access to that information
PlayerDto: {
	"name": - String
	"roomCode": - 4-Digit Alphanumeric String generated by the server
	"stake": - this is an ArrayList of two Integers: [quantity, quality]
	"seatNum": - this is an Integer that determines the order in which players take their turn
	"score": - Integer
	"isDiceRolled": - boolean - indicator to let you know if the player has rolled their dice yet
}

//PURPOSE - This class was created to notify the client of the current game state
GamestateDto: {
	"roomCode": - 4-Digit Alphanumeric String generated by the server
	"activePlayerSeatNum": - Integer - this is the seatNum of the active player
	"lastPlayerSeatNum": - Integer - this is the seatNum of the previous player
}